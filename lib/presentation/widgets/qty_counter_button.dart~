import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:bamboo_basket_customer_app/core/theme/custom_text_styles.dart';

import '../../core/theme/app_colors.dart';

class QtyCounterButton extends StatefulWidget {
  const QtyCounterButton({
    super.key,
    this.onDecrementQty,
    this.hideDefaultAddBtn = false,
    this.onIncrementQty,
    this.qty = 0,
    this.previousQty = -1,
    this.gap,
  });

  final VoidCallback? onDecrementQty;
  final VoidCallback? onIncrementQty;
  final Widget? gap;
  final bool hideDefaultAddBtn;
  final int qty, previousQty;

  @override
  State<QtyCounterButton> createState() => _QtyCounterButtonState();
}

class _QtyCounterButtonState extends State<QtyCounterButton> {
  // late int _previousQty;
  bool _isAnimating = false;

  // @override
  // void initState() {
  //   _previousQty = widget.previousQty;
  //   super.initState();
  // }

  void _updateQty({required bool isIncrement}) {
    if (_isAnimating) return;

    _isAnimating = true;
    HapticFeedback.vibrate();

    if (isIncrement && widget.onIncrementQty != null) {
      widget.onIncrementQty!();
    } else if (!isIncrement && widget.onDecrementQty != null) {
      widget.onDecrementQty!();
    }

    Future.delayed(const Duration(milliseconds: 200), () {
      _isAnimating = false;
    });
  }

  void incrementQty() {
    _updateQty(isIncrement: true);
  }

  void decrementQty() {
    _updateQty(isIncrement: false);
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 1, vertical: 2),
      decoration: BoxDecoration(
        color: AppColors.kBlack3,
        borderRadius: BorderRadius.circular(10),
      ),
      width: 100,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        mainAxisSize: MainAxisSize.min,
        children: [
          InkWell(
            onTap: decrementQty,
            child: Container(
              width: 30,
              height: 30,
              decoration: BoxDecoration(
                color: AppColors.kOffWhite,
                borderRadius: BorderRadius.circular(10),
              ),
              child: const Icon(
                Icons.remove,
                color: AppColors.kBlack3,
              ),
            ),
          ),
          Text(
            "${widget.qty}",
            style: context.customTextTheme.text14W700.copyWith(
              color: Colors.white,
            ),
          ),
          InkWell(
            onTap: incrementQty,
            child: Container(
              width: 30,
              height: 30,
              decoration: BoxDecoration(
                color: AppColors.kOffWhite,
                borderRadius: BorderRadius.circular(10),
              ),
              child: const Icon(
                Icons.add,
                color: AppColors.kBlack3,
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class QtyCounterButton2 extends StatefulWidget {
  const QtyCounterButton2({
    super.key,
    this.onDecrementQty,
    this.hideDefaultAddBtn = false,
    this.onIncrementQty,
    this.qty = 0,
    this.previousQty = -1,
    this.gap,
  });

  final VoidCallback? onDecrementQty;
  final VoidCallback? onIncrementQty;
  final Widget? gap;
  final bool hideDefaultAddBtn;
  final int qty, previousQty;

  @override
  State<QtyCounterButton2> createState() => _QtyCounterButton2State();
}

class _QtyCounterButton2State extends State<QtyCounterButton2> {
  // late int _previousQty;
  bool _isAnimating = false;

  // @override
  void _updateQty({required bool isIncrement}) {
    if (_isAnimating) return;

    _isAnimating = true;
    HapticFeedback.vibrate();

    if (isIncrement && widget.onIncrementQty != null) {
      widget.onIncrementQty!();
    } else if (!isIncrement && widget.onDecrementQty != null) {
      widget.onDecrementQty!();
    }

    Future.delayed(const Duration(milliseconds: 200), () {
      _isAnimating = false;
    });
  }

  void incrementQty() {
    _updateQty(isIncrement: true);
  }

  void decrementQty() {
    _updateQty(isIncrement: false);
  }

  @override
  Widget build(BuildContext context) {
    return ConstrainedBox(
      constraints: const BoxConstraints(minWidth: 90, maxWidth: 100),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        mainAxisSize: MainAxisSize.min,
        children: [
          InkWell(
            onTap: decrementQty,
            child: Container(
              width: 30,
              height: 30,
              decoration: BoxDecoration(
                  color: AppColors.kWhite,
                  borderRadius: BorderRadius.circular(8.0),
                  border: Border.all(
                    color: AppColors.kGray.withOpacity(0.15),
                  )),
              child: const Icon(
                Icons.remove_rounded,
                color: AppColors.kGray,
              ),
            ),
          ),
          Text(
            "${widget.qty}",
            style: context.customTextTheme.text14W700.copyWith(
              color: AppColors.kBlack2,
            ),
          ),
          InkWell(
            onTap: incrementQty,
            child: Container(
              width: 30,
              height: 30,
              decoration: BoxDecoration(
                color: AppColors.kBlack2,
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: const Icon(
                Icons.add_rounded,
                color: AppColors.kWhite,
              ),
            ),
          )
        ],
      ),
    );
  }
}
