import 'package:auto_route/auto_route.dart';
import 'package:dart_extensions/dart_extensions.dart';
import 'package:dartx/dartx.dart';
import 'package:flutter_form_builder/flutter_form_builder.dart';
import 'package:bamboo_basket_customer_app/core/theme/app_theme.dart';
import 'package:bamboo_basket_customer_app/core/utils/date_utils.dart';
import 'package:bamboo_basket_customer_app/presentation/widgets/custom_back_button.dart';
import '../../../core/routes/routes.gr.dart';
import '../../../core/utils/utils.dart';
import '../../../gen/assets.gen.dart';
import 'package:fluentui_system_icons/fluentui_system_icons.dart';
import 'package:flutter/material.dart';
import 'package:bamboo_basket_customer_app/application/cart/cart_provider.dart';
import 'package:bamboo_basket_customer_app/application/user/user_provider.dart';
import 'package:bamboo_basket_customer_app/core/theme/custom_text_styles.dart';
import 'package:bamboo_basket_customer_app/core/utils/ui_utils.dart';
import 'package:bamboo_basket_customer_app/presentation/widgets/bottom_sheet_drag_handler.dart';
import 'package:bamboo_basket_customer_app/presentation/widgets/custom_close_icon.dart';
import 'package:bamboo_basket_customer_app/presentation/widgets/get_provider_view.dart';
import 'package:bamboo_basket_customer_app/presentation/widgets/qty_counter_button.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';

import '../../../core/theme/app_colors.dart';
import '../../widgets/boucing_widget.dart';
import '../../widgets/button_progress.dart';

@RoutePage()
class CartScreen extends GetProviderView<CartProvider> {
  const CartScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final cartProvider = notifier(context);
    final cartListener = listener(context);
    final userProvider = notifier2<UserProvider>(context);
    final userListener = notifier2<UserProvider>(context);

    final _notesFieldKey = GlobalKey<FormBuilderFieldState>();

    const outlinedBorder = OutlineInputBorder(
      borderSide: BorderSide(color: Colors.transparent),
    );

    return PopScope(
      onPopInvoked: (_) {
        cartProvider.resetValues();
      },
      child: Theme(
        data: Theme.of(context).copyWith(
          textTheme: GoogleFonts.quicksandTextTheme(),
          cardTheme: const CardTheme(
            margin: EdgeInsets.zero,
            color: AppColors.kWhite,
            elevation: 0,
            shape: RoundedRectangleBorder(
              side: BorderSide.none,
            ),
          ),
        ),
        child: Scaffold(
          backgroundColor: AppColors.kLightWhite2,
          appBar: AppBar(
            elevation: 0.0,
            // leading: const CustomBackButton(),
            automaticallyImplyLeading: false,

            leadingWidth: 70,
            title: Text(
              "Cart",
              style: context.customTextTheme.text18W600,
            ),
            backgroundColor: AppColors.kWhite,
            bottom: PreferredSize(
              preferredSize: const Size.fromHeight(1.0),
              child: Container(
                color: AppColors.kLightGray2,
                height: 1.0,
              ),
            ),
            centerTitle: true,
          ),
          bottomSheet: Visibility(
            visible: !cartListener.isCartEmpty,
            child: Container(
              height: 62.0,
              decoration: const BoxDecoration(
                color: AppColors.kBlack2,
              ),
              child: Padding(
                padding: const EdgeInsets.symmetric(
                  horizontal: 20.0,
                  vertical: 10.0,
                ).copyWith(right: 16.0),
                child: Row(
                  children: <Widget>[
                    Text(
                      "${cartListener.totalCartItems} items",
                      style: context.customTextTheme.text18W600.copyWith(
                        color: AppColors.kWhite,
                      ),
                    ),
                    const VerticalDivider(
                      indent: 10.0,
                      endIndent: 10.0,
                      width: 40.0,
                    ),
                    Text(
                      Utils.format(cartListener.totalAmount),
                      style: context.customTextTheme.text18W600.copyWith(
                        color: AppColors.kWhite,
                      ),
                    ),
                    const Spacer(),
                    Flexible(
                      flex: 2,
                      child: FilledButton(
                        onPressed:
                            !cartListener.deliveryOrTakeAwayChargeCalculating
                                ? () async {
                                    if (cartProvider.validateInputData()) {
                                      context.pushRoute(
                                        const CheckoutScreenRoute(),
                                      );
                                    }
                                  }
                                : null,
                        style: FilledButton.styleFrom(
                          backgroundColor: AppColors.kWhite,
                          disabledBackgroundColor: AppColors.kWhite,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(20.0),
                          ),
                          elevation: 0,
                          foregroundColor: AppColors.kBlack2,
                          disabledForegroundColor: AppColors.kBlack2,
                          textStyle: context.customTextTheme.text16W600,
                        ),
                        child: const Text("Checkout"),
                      ),
                    )
                  ],
                ),
              ),
            ),
          ),
          body: cartListener.isCartEmpty
              ? Center(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: <Widget>[
                      Assets.icons.emptyCart.image(
                        width: 200.0,
                      ),
                      verticalSpaceRegular,
                      Text(
                        "Your cart is empty",
                        style: context.customTextTheme.text18W600,
                      ),
                      verticalSpaceTiny,
                      Text(
                        "Add some items to your cart",
                        style: context.customTextTheme.text16W500,
                      ),
                    ],
                  ),
                )
              : RefreshIndicator(
                  onRefresh: cartProvider.listCartItems,
                  child: ListView(
                    children: <Widget>[
                      Visibility(
                        visible: cartListener.cartDeleteLoading,
                        child: LinearProgressIndicator(
                          color: AppColors.kPrimaryColor,
                          minHeight: 2.0,
                          backgroundColor: AppColors.kBlack2.withOpacity(0.1),
                        ),
                      ),
                      Card(
                        child: ListView.separated(
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          padding: const EdgeInsets.all(20.0),
                          itemCount: cartListener.totalCartItems,
                          itemBuilder: (context, index) {
                            final cItem = cartProvider.cartItems[index];
                            return Padding(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 10.0,
                                vertical: 5.0,
                              ),
                              child: Row(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: <Widget>[
                                  Container(
                                    height: 12,
                                    width: 12,
                                    margin: const EdgeInsets.only(top: 5.0),
                                    decoration: BoxDecoration(
                                      color: AppColors.kBlack2,
                                      borderRadius: BorderRadius.circular(2.0),
                                    ),
                                  ),
                                  horizontalSpaceSmall,
                                  Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        (cItem.productName ?? "").capitalize(),
                                        style:
                                            context.customTextTheme.text16W600,
                                      ),
                                      Text(cItem.product_price ?? ""),
                                    ],
                                  ),
                                  const Spacer(),
                                  QtyCounterButton2(
                                    onDecrementQty: () => cartProvider
                                        .decrementCartItemQty(index),
                                    previousQty: 0,
                                    qty: (cItem.quantity ?? '0').toInt(),
                                    onIncrementQty: () => cartProvider
                                        .incrementCartItemQty(index),
                                  ),
                                  GestureDetector(
                                    onTap: () => cartProvider
                                        .removeCartItem(cItem.cartID),
                                    child: Padding(
                                      padding: const EdgeInsets.only(
                                        left: 12.0,
                                        top: 5.0,
                                      ),
                                      child: Center(
                                        child: Icon(
                                          Icons.close_rounded,
                                          size: 22,
                                          color: Colors.grey.shade700,
                                        ),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            );
                          },
                          separatorBuilder: (BuildContext context, int index) {
                            return Divider(
                              color: AppColors.kGray.withOpacity(0.20),
                            );
                          },
                        ),
                      ),
                      verticalSpaceSmall,
                      Card(
                        color: cartListener.validatedCouponDetails != null
                            ? AppColors.kWhite
                            : AppColors.kWhite,
                        shape: cartListener.validatedCouponDetails != null
                            ? const RoundedRectangleBorder(
                                side: BorderSide(color: AppColors.kGray2),
                              )
                            : null,
                        child: Padding(
                          padding: const EdgeInsets.symmetric(
                            horizontal: 24.0,
                            vertical: 20.0,
                          ),
                          child: cartListener.validatedCouponDetails == null
                              ? GestureDetector(
                                  onTap: () {
                                    context.router
                                        .push(const CoupenScreenRoute());
                                  },
                                  child: Row(
                                    mainAxisAlignment: MainAxisAlignment.start,
                                    children: [
                                      Assets.icons.dicountCopon
                                          .image(height: 24, width: 24),
                                      horizontalSpaceRegular,
                                      Text(
                                        "Apply Coupon",
                                        style:
                                            context.customTextTheme.text16W600,
                                      )
                                    ],
                                  ),
                                )
                              : Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    GestureDetector(
                                      onTap: () {
                                        context.router
                                            .push(const CoupenScreenRoute());
                                      },
                                      child: Row(
                                        mainAxisSize: MainAxisSize.min,
                                        children: <Widget>[
                                          Assets.icons.dicountCopon
                                              .image(height: 24, width: 24),
                                          horizontalSpaceRegular,
                                          Column(
                                            crossAxisAlignment:
                                                CrossAxisAlignment.start,
                                            children: <Widget>[
                                              Text(
                                                "${cartListener.validatedCouponDetails?.coupenCode} coupon",
                                                style: context
                                                    .customTextTheme.text16W600,
                                              ),
                                              Text(
                                                "Offer Applied",
                                                style: context
                                                    .customTextTheme.text14W600
                                                    .copyWith(
                                                  color: AppColors.kDimGray,
                                                ),
                                              )
                                            ],
                                          ),
                                        ],
                                      ),
                                    ),
                                    const Spacer(),
                                    GestureDetector(
                                      onTap: () =>
                                          cartProvider.removeCouponCode(),
                                      child: Icon(
                                        Icons.close_rounded,
                                        size: 22,
                                        color: Colors.grey.shade700,
                                      ),
                                    ),
                                  ],
                                ),
                        ),
                      ),
                      verticalSpaceSmall,
                      Card(
                        child: Padding(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 20.0, vertical: 10.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                "Order Type",
                                style: context.customTextTheme.text14W600,
                              ),
                              verticalSpaceSmall,
                              ListTileTheme(
                                contentPadding: const EdgeInsets.symmetric(
                                    horizontal: 10.0),
                                child: Row(
                                  children: [
                                    Expanded(
                                      child: ListTile(
                                        visualDensity: VisualDensity.compact,
                                        selected:
                                            cartListener.selectedOrderType ==
                                                OrderType.delivery,
                                        selectedTileColor:
                                            cartListener.selectedOrderType ==
                                                    OrderType.delivery
                                                ? AppColors.kLightWhite2
                                                : AppColors.kWhite,
                                        shape: RoundedRectangleBorder(
                                          side: BorderSide(
                                            color: cartListener
                                                        .selectedOrderType ==
                                                    OrderType.delivery
                                                ? AppColors.kBlack2
                                                : AppColors.kGray2,
                                            width: 1.0,
                                          ),
                                          borderRadius:
                                              BorderRadius.circular(8.0),
                                        ),
                                        leading: Assets.icons.fastDelivery
                                            .image(height: 34.0),
                                        title: Text(
                                          "Home Delivery",
                                          style: context
                                              .customTextTheme.text14W600
                                              .copyWith(
                                            color: cartListener
                                                        .selectedOrderType ==
                                                    OrderType.delivery
                                                ? AppColors.kBlack
                                                : AppColors.kGray,
                                          ),
                                        ),
                                        onTap: () {
                                          cartProvider.onChangeOrderType(
                                            OrderType.delivery,
                                          );
                                        },
                                      ),
                                    ),
                                    horizontalSpaceRegular,
                                    Expanded(
                                      child: ListTile(
                                        visualDensity: VisualDensity.compact,
                                        selected:
                                            cartListener.selectedOrderType ==
                                                OrderType.takeaway,
                                        selectedTileColor:
                                            cartListener.selectedOrderType ==
                                                    OrderType.takeaway
                                                ? AppColors.kLightWhite2
                                                : AppColors.kWhite,
                                        shape: RoundedRectangleBorder(
                                          side: BorderSide(
                                            color: cartListener
                                                        .selectedOrderType ==
                                                    OrderType.takeaway
                                                ? AppColors.kBlack2
                                                : AppColors.kGray2,
                                            width: 1.0,
                                          ),
                                          borderRadius:
                                              BorderRadius.circular(8.0),
                                        ),
                                        leading: Assets.icons.takeAway
                                            .image(height: 34.0),
                                        title: Text(
                                          "Take Away",
                                          style: context
                                              .customTextTheme.text14W600
                                              .copyWith(
                                            color: cartListener
                                                        .selectedOrderType ==
                                                    OrderType.takeaway
                                                ? AppColors.kBlack
                                                : AppColors.kGray,
                                          ),
                                        ),
                                        onTap: () {
                                          cartProvider.onChangeOrderType(
                                            OrderType.takeaway,
                                          );
                                        },
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      verticalSpaceSmall,
                      if (cartListener.selectedAddress == null) ...[
                        Card(
                          child: Padding(
                            padding: const EdgeInsets.symmetric(
                              vertical: 16.0,
                              horizontal: 20.0,
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: <Widget>[
                                if (cartListener.selectedOrderType ==
                                    OrderType.takeaway) ...[
                                  _buildTakeAwayTimeWidget(),
                                  const Divider(
                                    height: 30.0,
                                    color: AppColors.kLightGray2,
                                  ),
                                ],
                                InkWell(
                                  onTap: () => showAddressListSheet(context),
                                  child: Row(
                                    mainAxisSize: MainAxisSize.min,
                                    mainAxisAlignment: MainAxisAlignment.start,
                                    children: [
                                      const Icon(
                                          FluentIcons.location_24_regular),
                                      const SizedBox(width: 8.0),
                                      // Add space between icon and text
                                      Flexible(
                                        child: Text(
                                          "Select Address For ${cartListener.selectedOrderType == OrderType.takeaway ? "Billing" : "Delivery"}",
                                          style: context
                                              .customTextTheme.text16W600,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ] else
                        Card(
                          child: Padding(
                            padding: const EdgeInsets.symmetric(
                              vertical: 16.0,
                              horizontal: 20.0,
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: <Widget>[
                                if (cartListener.selectedOrderType ==
                                    OrderType.takeaway) ...[
                                  _buildTakeAwayTimeWidget(),
                                  const Divider(
                                    height: 30.0,
                                    color: AppColors.kLightGray2,
                                  ),
                                ],
                                Row(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: <Widget>[
                                    const Icon(FluentIcons.location_24_regular),
                                    horizontalSpaceSmall,
                                    Expanded(
                                      child: Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        children: <Widget>[
                                          Text(
                                            "Address",
                                            style: GoogleFonts.quicksand(
                                              textStyle: context
                                                  .customTextTheme.text16W600
                                                  .copyWith(
                                                color: AppColors.kBlack2,
                                                fontWeight: FontWeight.w700,
                                              ),
                                            ),
                                          ),
                                          Text(
                                            cartListener.selectedAddress!
                                                .userFulladdress
                                                .trimLeft()
                                                .capitalize(),
                                            style: GoogleFonts.quicksand(
                                              textStyle: context
                                                  .customTextTheme.text16W500
                                                  .copyWith(
                                                color: AppColors.kBlack2,
                                              ),
                                            ),
                                          ),
                                          Text(
                                            userListener.userData?.user
                                                    .userMobile ??
                                                "",
                                            style: GoogleFonts.quicksand(
                                              textStyle: context
                                                  .customTextTheme.text16W500,
                                            ),
                                          ),
                                          Text(
                                            userListener
                                                    .userData?.user.userEmail ??
                                                "",
                                            style: GoogleFonts.quicksand(
                                              textStyle: context
                                                  .customTextTheme.text16W500,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                    horizontalSpaceSmall,
                                    InkWell(
                                      onTap: () =>
                                          showAddressListSheet(context),
                                      child: Text(
                                        "CHANGE",
                                        style:
                                            context.customTextTheme.text14W600,
                                      ),
                                    )
                                  ],
                                ),
                              ],
                            ),
                          ),
                        ),
                      verticalSpaceSmall,
                      Card(
                        child: Padding(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 10.0, vertical: 10.0),
                          child: FormBuilderTextField(
                            name: 'notes',
                            key: _notesFieldKey,
                            decoration: InputDecoration(
                              prefixIcon: const Icon(
                                FluentIcons.notepad_24_regular,
                                color: AppColors.kBlack2,
                              ),
                              contentPadding: EdgeInsets.zero,
                              enabledBorder: outlinedBorder,
                              border: outlinedBorder,
                              focusedBorder: outlinedBorder,
                              disabledBorder: outlinedBorder,
                              errorBorder: outlinedBorder,
                              focusedErrorBorder: outlinedBorder,
                              hintText: "Notes for the restaurant...",
                              hintStyle: context.customTextTheme.text16W400,
                            ),
                          ),
                        ),
                      ),
                      verticalSpaceRegular,
                      Column(
                        children: [
                          Container(
                            decoration: BoxDecoration(
                              boxShadow: [
                                BoxShadow(
                                  color: AppColors.kGray.withOpacity(0.15),
                                  blurRadius: 4.0,
                                  offset: const Offset(0, 4),
                                ),
                              ],
                            ),
                            child: CustomPaint(
                              size: const Size(double.infinity, 10),
                              painter: _SpikyEdgePainter(),
                            ),
                          ),
                          Container(
                            height: context.heightPx * 0.3,
                            width: double.infinity,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 20.0, vertical: 10.0),
                            decoration: const BoxDecoration(
                              color: AppColors.kWhite,
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: <Widget>[
                                Text(
                                  "Bill Details",
                                  style: context.customTextTheme.text16W500,
                                ),
                                verticalSpaceSmall,
                                _SummaryRow(
                                  label: "Sub Total",
                                  value: cartListener.cartTotalPriceDisplay ??
                                      "£0.00",
                                  style: context.customTextTheme.text16W600,
                                ),
                                verticalSpaceTiny,
                                _SummaryRow(
                                  label: cartListener.selectedOrderType ==
                                          OrderType.takeaway
                                      ? "Takeaway Charge"
                                      : "Delivery Charge",
                                  value:
                                      "£${cartListener.calculatedDeliveryFee.toStringAsFixed(2)}",
                                ),
                                verticalSpaceTiny,
                                _SummaryRow(
                                  label: "Discount",
                                  value:
                                      "-£${cartListener.calculatedDiscount.toStringAsFixed(2)}",
                                ),
                                verticalSpaceTiny,
                                _SummaryRow(
                                  label: "Coupon Discount",
                                  value:
                                      "-£${cartListener.offerDiscount.toStringAsFixed(2)}",
                                ),
                                const Divider(height: 20.0),
                                _SummaryRow(
                                  label: "To Pay",
                                  value: Utils.format(cartListener.totalAmount),
                                  style: context.customTextTheme.text18W600,
                                ),
                                verticalSpaceRegular,
                              ],
                            ),
                          ),
                        ],
                      )
                    ],
                  ),
                ),
        ),
      ),
    );
  }

  Row BuildDeliveryCard(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Expanded(
          child: Stack(
            children: [
              // Text and Icon
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Container(
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(10),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.grey.withOpacity(0.2),
                            spreadRadius: 2,
                            blurRadius: 5,
                            offset: const Offset(2, 2),
                          ),
                        ],
                      ),
                      padding: const EdgeInsets.symmetric(
                          horizontal: 10, vertical: 20),
                      child: Align(
                        alignment: Alignment.topLeft,
                        child: Text(
                          'Home\nDelivery',
                          style: context.customTextTheme.text14W700,
                        ),
                      ),
                    )
                  ],
                ),
              ),
              // Positioned Image
              Positioned(
                right: 6,
                bottom: 5,
                child: Image.asset(
                  'assets/images/homeDelivery.png',
                  width: 60,
                  height: 50,
                ),
              ),
              // Checkmark for selected item
            ],
          ),
        ),
        Expanded(
          child: Stack(
            children: [
              // Text and Icon
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Container(
                      decoration: BoxDecoration(
                        color: AppColors.kBlack3,
                        borderRadius: BorderRadius.circular(10),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.grey.withOpacity(0.2),
                            spreadRadius: 2,
                            blurRadius: 5,
                            offset: const Offset(2, 2),
                          ),
                        ],
                      ),
                      padding: const EdgeInsets.symmetric(
                          horizontal: 10, vertical: 20),
                      child: Align(
                        alignment: Alignment.topLeft,
                        child: Text(
                          'Take\nAway',
                          style: context.customTextTheme.text14W700
                              .copyWith(color: AppColors.kWhite),
                        ),
                      ),
                    )
                  ],
                ),
              ),
              // Positioned Image
              Positioned(
                right: -10,
                bottom: -10,
                child: Image.asset(
                  'assets/images/takeAway.png',
                  width: 70,
                  height: 70,
                ),
              ),
              // Checkmark for selected item
            ],
          ),
        ),
      ],
    );
  }

  Future<void> showAddressListSheet(BuildContext context) {
    return showModalBottomSheet(
        backgroundColor: Colors.transparent,
        context: context,
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
        ),
        enableDrag: true,
        showDragHandle: false,
        builder: (context) {
          final userListener = context.watch<UserProvider>();
          final cartListener = context.watch<CartProvider>();
          return Theme(
            data: quickSandTextTheme(context),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                const RoundedCloseIcon(),
                verticalSpaceRegular,
                Container(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                  height: context.heightPx * 0.8,
                  width: double.infinity,
                  decoration: const BoxDecoration(
                    color: AppColors.kOffWhite4,
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(20),
                      topRight: Radius.circular(20),
                    ),
                  ),
                  child: Column(
                    children: [
                      verticalSpaceSmall,
                      const BottomSheetDragHandler(),
                      verticalSpaceRegular,
                      Text(
                        'Delivery Address',
                        style: context.customTextTheme.text18W600,
                      ),
                      verticalSpaceRegular,
                      TextFormField(
                        decoration: InputDecoration(
                          prefixIcon: Padding(
                            padding: const EdgeInsets.symmetric(vertical: 12.0),
                            child: Assets.icons.searchNormal.svg(
                              height: 16,
                              width: 16,
                              fit: BoxFit.contain,
                            ),
                          ),
                          isDense: true,
                          fillColor: AppColors.kLightBlue2,
                          filled: true,
                          hintText: 'Look for a Postcode...',
                          hintStyle:
                              context.customTextTheme.text16W500.copyWith(
                            color: AppColors.kGray3,
                          ),
                          border: const OutlineInputBorder(
                            borderSide: BorderSide.none,
                            borderRadius: BorderRadius.all(
                              Radius.circular(14.0),
                            ),
                          ),
                          enabledBorder: const OutlineInputBorder(
                              borderSide: BorderSide.none,
                              borderRadius:
                                  BorderRadius.all(Radius.circular(20.0))),
                          focusedBorder: const OutlineInputBorder(
                              borderSide: BorderSide.none,
                              borderRadius:
                                  BorderRadius.all(Radius.circular(20.0))),
                          errorBorder: const OutlineInputBorder(
                              borderSide: BorderSide.none,
                              borderRadius:
                                  BorderRadius.all(Radius.circular(20.0))),
                          disabledBorder: const OutlineInputBorder(
                              borderSide: BorderSide.none,
                              borderRadius:
                                  BorderRadius.all(Radius.circular(20.0))),
                        ),
                      ),
                      verticalSpaceMedium,
                      Expanded(
                          child: ListView.separated(
                        padding: EdgeInsets.zero,
                        itemCount: userListener.userAddressList.length,
                        itemBuilder: (context, index) {
                          final address = userListener.userAddressList[index];

                          return Container(
                            margin: const EdgeInsets.symmetric(horizontal: 5.0),
                            decoration: BoxDecoration(
                              color: AppColors.kWhite,
                              borderRadius: BorderRadius.circular(8.0),
                              boxShadow: const <BoxShadow>[
                                BoxShadow(
                                  color: Color.fromRGBO(0, 0, 0, 0.1),
                                  spreadRadius: 0,
                                  blurRadius: 8,
                                  offset: Offset(0, 3),
                                ),
                              ],
                            ),
                            child: Row(
                              children: <Widget>[
                                Expanded(
                                  child: ListTileTheme(
                                    horizontalTitleGap: 8.0,
                                    // contentPadding: const EdgeInsets.all(0.0),
                                    child: RadioListTile(
                                      value: address,
                                      groupValue: cartListener.selectedAddress,
                                      onChanged: (address) {
                                        if (address == null) return;
                                        context
                                            .read<CartProvider>()
                                            .onChangeAddress(address);
                                      },
                                      title: Text(
                                        address.addressTitle ?? "",
                                        style:
                                            context.customTextTheme.text18W600,
                                      ),
                                      subtitle: Text(
                                        Utils.removeExtraSpaces(address
                                            .userFulladdress
                                            .capitalize()),
                                        style: context
                                            .customTextTheme.text16W400
                                            .copyWith(color: AppColors.kGray),
                                      ),
                                    ),
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(right: 20.0),
                                  child: Assets.icons.editIcon.svg(),
                                ),
                              ],
                            ),
                          );
                        },
                        separatorBuilder: (BuildContext context, int index) {
                          return verticalSpaceRegular;
                        },
                      )),
                      const Divider(height: 30.0, color: AppColors.kLightGray2),
                      FilledButton(
                        onPressed: () {
                          context
                              .read<CartProvider>()
                              .validateAddress()
                              .then((validated) {
                            if (validated) {
                              Navigator.pop(context);
                            }
                          });
                        },
                        child: cartListener.deliveryOrTakeAwayChargeCalculating
                            ? showButtonProgress()
                            : Text('Apply',
                                style: context.customTextTheme.text14W600),
                      ),
                      verticalSpaceSmall,
                    ],
                  ),
                ),
              ],
            ),
          );
        });
  }

  Widget _buildTakeAwayTimeWidget() {
    return Builder(builder: (context) {
      final cartListener = listener(context);
      final cartProvider = notifier(context);
      return InkWell(
        onTap: () async {
          final TimeOfDay? pickUpTime = await showTimePicker(
            context: context,
            initialTime: cartListener.selectedPickUpTime != null
                ? TimeOfDay(
                    hour: cartListener.selectedPickUpTime!.hour,
                    minute: cartListener.selectedPickUpTime!.minute)
                : DateTimeUtils.addMinutesToTime(TimeOfDay.now(), 15),
            builder: (BuildContext context, Widget? child) {
              return Theme(
                data: Theme.of(context).copyWith(
                  dialogBackgroundColor: AppColors.kWhite,
                  textTheme: poppinsTextTheme(context).textTheme,
                  timePickerTheme: TimePickerThemeData(
                      backgroundColor: AppColors.kLightWhite2,
                      dialBackgroundColor: AppColors.kLightGray2,
                      dayPeriodColor: WidgetStateColor.resolveWith(
                        (states) {
                          if (states.contains(WidgetState.selected)) {
                            return AppColors.kBlack2;
                          }
                          return AppColors.kLightWhite2;
                        },
                      ),
                      hourMinuteColor: WidgetStateColor.resolveWith((states) {
                        if (states.contains(WidgetState.selected)) {
                          return AppColors.kBlack2;
                        }
                        return AppColors.kLightWhite2;
                      }),
                      hourMinuteTextColor: WidgetStateColor.resolveWith(
                        (states) {
                          if (states.contains(WidgetState.selected)) {
                            return AppColors.kWhite;
                          }
                          return AppColors.kGray;
                        },
                      ),
                      dayPeriodTextColor: WidgetStateColor.resolveWith(
                        (states) {
                          if (states.contains(WidgetState.selected)) {
                            return AppColors.kWhite;
                          }
                          return AppColors.kGray;
                        },
                      )),
                ),
                child: child!,
              );
            },
          );

          if (pickUpTime == null) return;
          cartProvider.onChangePickUpTime(
            DateTimeUtils.combineDateTime(DateTime.now(), pickUpTime),
          );
        },
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: <Widget>[
            const Icon(FluentIcons.clock_24_regular),
            horizontalSpaceSmall,
            Expanded(
              child: Text(
                cartListener.selectedPickUpTime == null
                    ? "Select Pick Time"
                    : "Pickup on ${DateTimeUtils.formatDateTimeToTime(
                        cartListener.selectedPickUpTime!,
                      )}",
                style: context.customTextTheme.text16W600,
              ),
            ),
            Visibility(
              visible: cartListener.selectedPickUpTime != null,
              child: Text(
                "CHANGE",
                style: context.customTextTheme.text14W600,
              ),
            ),
          ],
        ),
      );
    });
  }
}

class _SummaryRow extends StatelessWidget {
  final String label;
  final String value;
  final TextStyle? style;

  const _SummaryRow({
    required this.label,
    required this.value,
    this.style,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          label,
          style: style ?? context.customTextTheme.text14W500,
        ),
        Text(
          value,
          style: style ?? context.customTextTheme.text14W500,
        ),
      ],
    );
  }
}

class _SpikyEdgePainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.white
      ..style = PaintingStyle.fill;

    final path = Path();

    // Start at top-left corner
    path.moveTo(0, 0);

    // Draw spikes
    const double spikeWidth = 16.0;
    const double spikeHeight = 10.0;
    for (double i = 0; i < size.width; i += spikeWidth) {
      path.lineTo(i + spikeWidth / 2, spikeHeight); // Go up for the spike
      path.lineTo(i + spikeWidth, 0); // Go back down
    }

    path.lineTo(size.width, size.height); // Bottom-right corner
    path.lineTo(0, size.height); // Bottom-left corner
    path.close();

    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}
